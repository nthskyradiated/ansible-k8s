# -*- mode: ruby -*-
# vi:set ft=ruby sw=2 ts=2 sts=2:

RAM_SIZE = 16
CPU_CORES = 8
IP_NW = "192.168.100."

ram_selector = (RAM_SIZE / 4) * 4
if ram_selector < 8
  raise "Insufficient memory #{RAM_SIZE}GB. min 8GB"
end

RESOURCES = {
  "control" => {
    1 => { "ram" => 4096, "cpu" => CPU_CORES >= 12 ? 4 : 2 },
    2 => { "ram" => 4096, "cpu" => CPU_CORES > 8 ? 2 : 1 }
  },
  "worker" => { "ram" => 4096, "cpu" => 2 }
}

def setup_dns(node)
  node.vm.provision "setup-dns", type: "shell", path: "../tools/ubuntu/update-dns.sh"
end

def setup_ssh(node)
  node.vm.provision "setup-ssh", type: "shell", inline: <<-SHELL
    # Enable password authentication
    sed -i --regexp-extended 's/#?PasswordAuthentication (yes|no)/PasswordAuthentication yes/' /etc/ssh/sshd_config
    sed -i --regexp-extended 's/#?Include \\/etc\\/ssh\\/sshd_config.d\\/\\*.conf/#Include \\/etc\\/ssh\\/sshd_config.d\\/\\*.conf/' /etc/ssh/sshd_config
    sed -i 's/KbdInteractiveAuthentication no/KbdInteractiveAuthentication yes/' /etc/ssh/sshd_config
    systemctl reload ssh

    # Setup .ssh directory
    if [ ! -d /home/vagrant/.ssh ]; then
        mkdir /home/vagrant/.ssh
        chmod 700 /home/vagrant/.ssh
        chown vagrant:vagrant /home/vagrant/.ssh
    fi
  SHELL
end

def install_sshpass(node)
  node.vm.provision "install-sshpass", type: "shell", inline: <<-SHELL
    sudo apt-get update -y
    sudo apt-get install -y sshpass
  SHELL
end

def provision_kubernetes_node(node)
  node.vm.provision "setup-kernel", type: "shell", path: "../tools/ubuntu/setup-kernel.sh"
  setup_ssh(node)
  install_sshpass(node)
  node.vm.provision "file", source: "../tools/ubuntu/net-cleanup.sh", destination: "/home/vagrant/net-cleanup.sh"
end


NUM_CONTROL_NODES = 1
NUM_WORKER_NODE = 2
MASTER_IP_START = 210
NODE_IP_START = 220
LB_IP_START = 200

LIBVIRT_DEFAULTS = {
  :driver => "kvm",
  :cpu_mode => "host-passthrough",
  :nested => true,
  :keymap => "en-us",
  :storage_pool_name => "default",
  :disk_bus => "virtio",
  :nic_model_type => "virtio"
}

Vagrant.configure("2") do |config|
  # Generate inventory file before any VM provisioning
  config.trigger.before :up do |trigger|
    trigger.run = { inline: "ruby ../tools/generate_inventory.rb" }
  end

  config.trigger.after :destroy do |trigger|
    trigger.run = {
      inline: "bash ../tools/ubuntu/ssh-cleanup.sh"
    }
  end

  config.vm.box = "bento/ubuntu-24.04"
  config.vm.box_version = "202502.21.0"
  config.vm.boot_timeout = 900
  config.vm.box_check_update = false
  config.vm.boot_timeout = 900

  config.vm.provider :libvirt do |libvirt|
    LIBVIRT_DEFAULTS.each { |key, value| libvirt.send("#{key}=", value) }
  end

  (1..NUM_CONTROL_NODES).each do |i|
    config.vm.define "controlplane0#{i}" do |node|
      node.vm.hostname = "controlplane0#{i}"
      node.vm.provider :libvirt do |lv|
        lv.memory = RESOURCES["control"][i > 2 ? 2 : i]["ram"]
        lv.cpus = RESOURCES["control"][i > 2 ? 2 : i]["cpu"]
        lv.disk_bus = "virtio"
        lv.storage :file, :size => '20G'
      end
      node.vm.network :private_network,
        :ip => "#{IP_NW}#{MASTER_IP_START + i}",
        :type => "static",
        :libvirt__network_name => "k8s-net",
        :libvirt__forward_mode => "nat",
        :libvirt__guest_ipv6 => "no"
      setup_dns(node)
      provision_kubernetes_node(node)
      if i == 1
        node.vm.provision "file", source: "../tools/ubuntu/vimrc", destination: "$HOME/.vimrc"
        node.vm.provision "file", source: "../tools/ubuntu/cilium-values.yaml", destination: "$HOME/cilium-values.yaml"
      end
    end
  end

  if NUM_CONTROL_NODES >= 2
    config.vm.define "loadbalancer" do |node|
      node.vm.hostname = "loadbalancer"
      node.vm.provider :libvirt do |lv|
        lv.memory = 2048
        lv.cpus = 1
        lv.storage :file, :size => '20G'
      end
      node.vm.network :private_network,
        :ip => "#{IP_NW}#{LB_IP_START}",
        :type => "static",
        :libvirt__network_name => "k8s-net",
        :libvirt__forward_mode => "nat",
        :libvirt__guest_ipv6 => "no"
      setup_dns(node)
      setup_ssh(node)
      install_sshpass(node)
    end
  end

  (1..NUM_WORKER_NODE).each do |i|
    config.vm.define "node0#{i}" do |node|
      node.vm.hostname = "node0#{i}"
      node.vm.provider :libvirt do |lv|
        lv.memory = RESOURCES["worker"]["ram"]
        lv.cpus = RESOURCES["worker"]["cpu"]
        lv.disk_bus = "virtio"
        lv.storage :file, :size => '20G'
      end
      node.vm.network :private_network,
        :ip => "#{IP_NW}#{NODE_IP_START + i}",
        :type => "static",
        :libvirt__network_name => "k8s-net",
        :libvirt__forward_mode => "nat",
        :libvirt__guest_ipv6 => "no"
      setup_dns(node)
      provision_kubernetes_node(node)
      if i == NUM_WORKER_NODE
                node.vm.provision :ansible do |ansible|
          ansible.playbook = "../site.yaml"
          ansible.inventory_path = "../inventory"
          ansible.config_file = "../ansible.cfg"
          ansible.limit = "all"
          ansible.become = true
          ansible.compatibility_mode = "2.0"
          ansible.extra_vars = {
            "ansible_ssh_user" => "vagrant",
            "ansible_ssh_pass" => "vagrant",
          }
        end
      end
    end
  end
end